apply plugin: 'gradle-one-jar'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
 
}
task uberjar(type: OneJar) {
		    mainClass = 'com.github.gumtreediff.client.Run'
		}
	
		

		
allprojects {
	apply plugin: 'idea'

	group = 'com.github.gumtreediff'
	version = '2.1.0-SNAPSHOT'

	repositories {
		mavenCentral()
		jcenter()
	}
	  
}
 
ext.isRelease = !project.version.endsWith("SNAPSHOT")

subprojects {
	apply plugin: 'java'
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'

	apply plugin: 'checkstyle'
	checkstyle {
		toolVersion = '6.12.1'
		configFile = rootProject.file('gumtree_checkstyle.xml')
		configProperties = [suppressionFile: "${rootProject.file('checkstyle_ignore.xml')}"]
	}

	dependencies {
		testCompile 'junit:junit:4.+'
	}

	apply plugin: 'jacoco'
	jacoco {
		toolVersion = '0.7.1.201405082137'
	}

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
		sourceDirectories = files(sourceSets.main.allSource.srcDirs)
		classDirectories =	files(sourceSets.main.output)
		reports {
			html.enabled = true
			xml.enabled = false
			csv.enabled = false
		}
	}
}

configure(subprojects.findAll {it.name != 'core'}) {
	dependencies {
		compile project(':core')
	}
}

configure(subprojects.findAll { it.name.startsWith('gen.antlr') }) {
	apply plugin: 'antlr'

	dependencies {
		antlr 'org.antlr:antlr:3.5.2'
	}

	if (it.name.startsWith('gen.antlr-')) {
		dependencies {
			compile project(':gen.antlr')
		}
	}
}

evaluationDependsOnChildren();

if (project.hasProperty('mvn')) {

	configure(subprojects.findAll { !(it.name in ['dist', 'benchmark']) }) { subproject ->
		apply plugin: 'maven'
		apply plugin: 'signing'

		task javadocJar(type: Jar) {
			classifier = 'javadoc'
			from javadoc
		}

		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}

		artifacts {
			archives javadocJar, sourcesJar
		}

		
		
        if (project.isRelease && gradle.taskGraph.hasTask("uploadArchives")) {
            signing {
                sign configurations.archives
            }
        }

	}
}
